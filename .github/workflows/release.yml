name: Release
on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    ## - release

permissions: write-all

env:
  BIN_NAME: danceinterpreter-rs
  PROJECT_NAME: danceinterpreter-rs
  REPO_NAME: klassenserver7b/danceinterpreter-rs
  COVER_LOADER_PATH: traktor-api/cover-loader

jobs:
  test-rust:
    name: Test Rust
    runs-on: macos-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release          
  
  dist-rust:
    name: Rust-dist
    needs: [ test-rust ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [ x86_64-linux, aarch64-linux, x86_64-windows, aarch64-macos ]
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: aarch64-linux
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: true
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary (non windows)
        if: matrix.build != 'x86_64-windows'
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Build release binary (windows)
        if: matrix.build == 'x86_64-windows'
        run: |
            $env:RUSTFLAGS = "-Csymbol-mangling-version=v0"
            cargo build --release --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' || matrix.build == 'x86_64-macos'
        run: strip "target/${{ matrix.target }}/release/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            /target/${{ matrix.target }}/release/$BIN_NAME

      - name: Build archive
        shell: bash
        run: |
          mkdir bins
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "bins/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "bins/"
          fi

      - uses: actions/upload-artifact@v4.6.2
        with:
          name: bins-rust-${{ matrix.build }}
          path: bins

  dist-js:
      name: JS-dist
      runs-on: ubuntu-latest
      steps:
        - name: Checkout sources
          uses: actions/checkout@v5
          with:
            submodules: true

        - name: Setup Bun
          uses: oven-sh/setup-bun@v2
          with:
            bun-version: "latest"

        - name: Compile Binaries
          shell: bash
          run: |
            cd $COVER_LOADER_PATH
            bun install
            bun build --compile --target=bun-linux-x64 ./index.ts --outfile target/cover-loader
            bun build --compile --target=bun-windows-x64-baseline ./index.ts --outfile target/cover-loader

        - uses: actions/upload-artifact@v4.6.2
          with:
            name: bins-js
            path: ./traktor-api/cover-loader/target
        

  publish:
    name: Publish
    needs: [ dist-rust, dist-js ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.3.0
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo val=$name >> $GITHUB_OUTPUT
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex
          mkdir bins

          for dir in bins-rust-* ; do
              platform=${dir#"bins-rust-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mv bins-rust-$platform/$BIN_NAME$exe bins/$pkgname$exe
          done
          mv bins-js/* bins/
          chmod -R +x bins

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: bins/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
